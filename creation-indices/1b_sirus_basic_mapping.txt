# Création d'un index "sirus_basic_mapping", qui ne rajoute à "sirus_naive"
# qu'un simple mapping pour les champs. L'étape suivante serait d'expérimenter
# avec les analyzers, après avoir fait des tests avec quelques requêtes d'ES.
# L'analyzer "french" défini ici correspond à celui par défaut d'ES. Autrement
# dit, il n'était pas utile de le définir, mais cela permet de visualiser les
# opérations effectuées à l'indexation.

# Version b : rajoute quelques champs non indexés dans la version initiale,
# en vue d'utiliser une requête de type multi_match/best_fields.

# Notes mapping :
#   - Utiliser  ["norms": false] pour les champs ne servant qu'en filtres ou agrégats
#   - Utiliser ["index": false] pour ne pas indexer du tout certains champs (ils restent accessibles via _source) ;
#     permet d'accélérer le chargement et réduit la taille de l'index.
#   - On utilise l'option "copy_to" pour créer des variables artificielles comme concaténation de plusieurs variables de base. 
#   Mais ce procédé ne permet pas de choisir l'ordre dans lequel les variables d'origine sont copiées, et n'est donc pas adapté à du phrase matching
#  (ie quand on s'intéresse à l'ordre des mots). Pour cela, on peut utiliser éventuellement un script, eg : https://stackoverflow.com/questions/29534337/how-to-specify-elasticsearch-copy-to-order
PUT /sirus_basic_mapping?pretty
{
  "settings": {
    "analysis": {
      "filter": {
        "french_elision": {
          "type":         "elision",
          "articles_case": true,
          "articles": [
              "l", "m", "t", "qu", "n", "s",
              "j", "d", "c", "jusqu", "quoiqu",
              "lorsqu", "puisqu"
            ]
        },
        "french_stop": {
          "type":       "stop",
          "stopwords":  "_french_"
        },
        "french_stemmer": {
          "type":       "stemmer",
          "language":   "light_french"
        }
      },
      "analyzer": {
        "french": {
          "tokenizer":  "standard",
          "filter": [
            "french_elision",
            "french_stop",
            "french_stemmer",
            "lowercase"
          ]
        }
      }
    }
  },
  "mappings" : {
       "doc" : {
           "properties" : {
             "description" : { "type" : "text", "analyzer" : "french", "norms" : false },
             "localisation" : { "type" : "text", "analyzer" : "french", "norms" : false },
             "sirus_id" : { "type" : "keyword", "index" : false },
             "nic" : { "type" : "keyword", "index" : false },
             "ape" : { "type" : "keyword" },
             "creat_daaaammjj" : { "type" : "date", "format": "yyyyMMdd", "index" : false },
             "apet" : { "type" : "keyword" },
             "eff_3112_et" : { "type" : "integer", "index" : false },
             "eff_etp_et" : { "type" : "double", "index" : false },
             "eff_et_effet_daaaammjj" : { "type" : "date", "format": "yyyyMMdd", "index" : false },
             "enseigne_et1" : { "type" : "text", "copy_to" : "description"},
             "nom_comm_et" : { "type" : "text", "copy_to" : "description" },
             "adr_et_loc_geo" : { "type" : "text", "analyzer" : "french", "norms" : false },
             "adr_et_compl" : { "type" : "text", "analyzer" : "french", "norms" : false },
             "adr_et_voie_num" : { "type" : "keyword" },
             "adr_et_voie_repet" : { "type" : "keyword", "index" : false },
             "adr_et_voie_type" : { "type" : "text", "analyzer" : "french", "norms" : false },
             "adr_et_voie_lib" : { "type" : "text", "analyzer" : "french", "norms" : false },
             "adr_et_cedex" : { "type" : "keyword", "index" : false },
             "adr_et_distsp" : { "type" : "text", "analyzer" : "french", "norms" : false },
             "sir_adr_et_com_lib" : { "type" : "text" },
             "adr_et_post" : { "type" : "integer" },
             "adr_et_l1" : { "type" : "text", "copy_to" : "localisation" },
             "adr_et_l2" : { "type" : "text", "copy_to" : "localisation" },
             "adr_et_l3" : { "type" : "text", "copy_to" : "localisation" },
             "adr_et_l4" : { "type" : "text", "copy_to" : "localisation" },
             "adr_et_l5" : { "type" : "text", "copy_to" : "localisation" },
             "adr_et_l6" : { "type" : "text", "copy_to" : "localisation" },
             "adr_et_l7" : { "type" : "text", "copy_to" : "localisation" },
             "nic_siege" : { "type" : "keyword", "index" : false },
             "unite_type" : { "type" : "keyword", "index" : false },
             "region" : { "type" : "keyword", "index" : false },
             "adr_depcom" : { "type" : "keyword" },
             "region_impl" : { "type" : "keyword", "index" : false },
             "region_mult" : { "type" : "keyword", "index" : false },
             "tr_eff_etp" : { "type" : "keyword" },
             "cj" : { "type" : "keyword" },
             "denom" : { "type" : "text", "copy_to" : "description" },
             "denom_condense" : { "type" : "text", "copy_to" : "description" },
             "sigle" : { "type" : "text", "copy_to" : "description" },
             "enseigne" : { "type" : "text", "copy_to" : "description" },
             "eff_3112_uniteLegale" : { "type" : "integer", "index" : false },
             "eff_etp_uniteLegale" : { "type" : "double", "index" : false },
             "eff_effet_daaaammjj_uniteLegale" : { "type" : "date", "format": "yyyyMMdd", "index" : false },
             "x" : { "type" : "double", "index" : false },
             "y" : { "type" : "double", "index" : false },
             "SourceXYW" : { "type" : "double", "index" : false },
             "qual" : { "type" : "keyword", "index" : false }
           }
       }
   }
}


# On désactive également les replicas et le rafraîchissement de l'index afin
# d'intégrer plus rapidement des données en masse.
# REF : https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-update-settings.html
# Liste des options d'index : https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html
PUT /sirus_basic_mapping/_settings
{
    "index" : {  
      "number_of_replicas": 0,
      "refresh_interval" : "-1"
    }
}

# On désactive également le processus de reroutage des shards mis en oeuvre
# par ES lorsqu'il détecte qu'un node n'a plus beaucoup d'espace disque.
# REF : https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-update-settings.html
PUT /_cluster/settings
{
    "persistent" : {
        "cluster.routing.allocation.disk.threshold_enabled" : false
    }
}

# Pour suivre le chargement (ie compter les documents indexés), on peut exécuter
# périodiquement cette requête.
GET /_cat/indices?v